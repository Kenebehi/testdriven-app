name: Echo Changed Files

on:
  push:
    branches: [ Kenebehi-workflow ]

jobs:
  echo-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Get changed files for Airflow Staging DAGs
        id: updated-dags-files
        uses: tj-actions/changed-files@v35
        with:
          base_sha: "${{ github.event.workflow_run.head_sha }}"
          files: |
            airflow/dags/**

      - name: Get Updated files in Configurations
        id: updated-configuration-files
        uses: tj-actions/changed-files@v35
        with:
          base_sha: "${{ github.event.workflow_run.head_sha }}"
          files: |
            settings/**

      - name: Get Updated files for DAG Utils
        id: updated-dag-utils-files
        uses: tj-actions/changed-files@v35
        with:
          base_sha: "${{ github.event.workflow_run.head_sha }}"
          files: |
            utils/dag_utils/**

      - name: Sync Only Updated DAGs
        if: ${{ steps.updated-dags-files.outputs.all_changed_and_modified_files !=0 }}
        env:
          S3_AIRFLOW_DIR: s3://product-analytics-pipelines/airflow
        run: |
          
          include=""
          for file in "${{ steps.updated-dags-files.outputs.all_changed_and_modified_files }}"; do
            include="$include --include $(basename $file)"
          done
          echo "the files: $files"
          echo "$include"
          echo "${{ steps.updated-dags-files.outputs.all_changed_and_modified_files }}"
          
          echo aws s3 sync ./airflow/dags/ $S3_AIRFLOW_DIR/staging/dags/ --exclude "*"  $include;
          echo aws s3 sync ./airflow/dags/ $S3_AIRFLOW_DIR/live/dags/ --exclude "*"  $include;
          echo aws s3 sync ./airflow/dags/ $S3_AIRFLOW_DIR/${{ github.event.release.tag_name }}/dags/ --exclude "*"  $include;

#      - name: Revert Commits on Failure
#        if: failure()
#        run: |
#          # Get the SHA of the last commit
#          last_commit=$(git rev-parse HEAD)
#
#          # Revert all commits since the first commit
#          git revert --no-commit HEAD~$(git rev-list --count HEAD ^$(git merge-base main $last_commit) HEAD)
#
#          # Commit the changes
#          git commit -m "Revert all changes since the last successful build"
#
#          # Push the changes back to the branch
#          git push origin main

